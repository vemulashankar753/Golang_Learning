{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red25\green28\blue31;\red255\green255\blue255;\red223\green33\blue121;
\red0\green0\blue0;\red27\green146\blue169;\red89\green98\blue106;}
{\*\expandedcolortbl;;\cssrgb\c12941\c14510\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c90980\c24314\c54902;
\cssrgb\c0\c0\c0;\cssrgb\c9020\c63529\c72157;\cssrgb\c42353\c45882\c49020;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww16820\viewh11420\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1) One of the core concepts for\'a0
\f1\fs42 \cf4 \strokec4 nil
\f0\fs48 \cf2 \strokec2 \'a0is that it is the default value for many common types:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 maps\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 slices\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 functions\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 channels\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 interfaces\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 errors\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
2) \cb3 The following types will default to the corresponding zero values. There are some types we have not covered yet, but we will cover them in detail in future chapters.\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 \strokec3 var s string    // defaults to ""\
var r rune      // defaults to 0\
var bt byte     // defaults to 0\
var i int       // defaults to 0\
var ui uint     // defaults to 0\
var f float32   // defaults to 0\
var c complex64 // defaults to 0\
var b bool      // defaults to false\
var arr [2]int  // defaults to [0 0]\
var obj struct \{\
	b   bool\
	arr [2]int\
\}                     // defaults to \{false [0 0]\}\
var si []int          // defaults to int\
var ch chan string    // defaults to nil\
var mp map[int]string // defaults to nil\
var fn func()         // defaults to nil\
var ptr *string       // defaults to nil\
\pard\tx720\pardeftab720\partightenfactor0

\f0\fs48 \cf2 \cb1 \strokec2 \
3) \cb3 A string is a sequence of one or more characters (letters, numbers, symbols) that can be either a constant or a variable. Strings exist within either back quotes\'a0
\f2\b `
\f0\b0 \'a0or double quotes\'a0
\f2\b "
\f0\b0 \'a0in Go and have different characteristics depending on which quotes you use.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 If you use the back quotes, you are creating a\'a0
\f1\fs42 \cf4 \strokec4 raw
\f0\fs48 \cf2 \strokec2 \'a0string literal. If you use the double quotes, you are creating an\'a0
\f1\fs42 \cf4 \strokec4 interpreted
\f0\fs48 \cf2 \strokec2 \'a0string literal.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb1 \
\
4) 
\fs72 \cf3 \cb6 \strokec3 Interpreted String Literals\cb1 \
\pard\pardeftab720\sa240\partightenfactor0

\fs48 \cf2 \strokec2 Interpreted string literals are character sequences between double quotes, as in\'a0
\f1\fs42 \cf4 \strokec4 "bar"
\f0\fs48 \cf2 \strokec2 . Within the quotes, any character may appear except newline and unescaped double quote.\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 \strokec3 a := "Say \\"hello\\" to Go!"\
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \cb1 \strokec2 You will almost always use interpreted string literals because they allow for escape characters within them.\
\
5) Backticks or characters inside a single quotes, its considered as raw string literal in Golang\
6) 
\fs72 \cf3 \cb6 \strokec3 UTF-8\cb1 \

\fs48 \cf2 \strokec2 Go supports UTF-8 characters out of the box, without any special setup, libaries, or packages.\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 \strokec3 a := "Hello, 
\f3 \'ca\'c0\'bd\'e7
\f1 "\
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \cb1 \strokec2 \
7) 
\fs72 \cf3 \cb6 \strokec3 Runes\cb1 \

\fs48 \cf2 \strokec2 A rune is a special type in go that represents special characters.\
You can define a rune using the single quote (
\f1\fs42 \cf4 \strokec4 '
\f0\fs48 \cf2 \strokec2 ) character:\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 \strokec3 a := 'A'\
fmt.Println(a)\
\pard\pardeftab720\qc\partightenfactor0

\f0\fs24 \cf7 \cb1 \strokec7 file: ./src/examples/utf8-rune/main.go\
\pard\pardeftab720\qr\partightenfactor0

\fs48 \cf2 \strokec2 \'a0\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 If you run the program, it prints out the value of\'a0
\f1\fs42 \cf4 \strokec4 65
\f0\fs48 \cf2 \strokec2 .\
The reason for this is because\'a0
\f1\fs42 \cf4 \strokec4 runes
\f0\fs48 \cf2 \strokec2 \'a0in Go are a special type.\
A\'a0
\f1\fs42 \cf4 \strokec4 rune
\f0\fs48 \cf2 \strokec2 \'a0is an alias for\'a0
\f1\fs42 \cf4 \strokec4 int32
\f0\fs48 \cf2 \strokec2 . A rune can be made up of\'a0
\f1\fs42 \cf4 \strokec4 1
\f0\fs48 \cf2 \strokec2 \'a0to\'a0
\f1\fs42 \cf4 \strokec4 3
\f0\fs48 \cf2 \strokec2 \'a0int32 values.\
\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
}
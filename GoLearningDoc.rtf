{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fnil\fcharset134 PingFangSC-Regular;\f4\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red25\green28\blue31;\red255\green255\blue255;\red223\green33\blue121;
\red0\green0\blue0;\red27\green146\blue169;\red89\green98\blue106;\red34\green35\blue37;\red163\green85\blue14;
\red24\green26\blue27;}
{\*\expandedcolortbl;;\cssrgb\c12941\c14510\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c90980\c24314\c54902;
\cssrgb\c0\c0\c0;\cssrgb\c9020\c63529\c72157;\cssrgb\c42353\c45882\c49020;\cssrgb\c17647\c18431\c19216;\cssrgb\c70588\c41176\c5490;
\cssrgb\c12549\c13333\c14118;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww28600\viewh15200\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
1) One of the core concepts for\'a0
\f1\fs42 \cf4 nil
\f0\fs48 \cf2 \'a0is that it is the default value for many common types:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
maps\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
slices\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
functions\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
channels\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
interfaces\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
errors\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
2) \cb3 The following types will default to the corresponding zero values. There are some types we have not covered yet, but we will cover them in detail in future chapters.\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 var s string    // defaults to ""\
var r rune      // defaults to 0\
var bt byte     // defaults to 0\
var i int       // defaults to 0\
var ui uint     // defaults to 0\
var f float32   // defaults to 0\
var c complex64 // defaults to 0\
var b bool      // defaults to false\
var arr [2]int  // defaults to [0 0]\
var obj struct \{\
	b   bool\
	arr [2]int\
\}                     // defaults to \{false [0 0]\}\
var si []int          // defaults to int\
var ch chan string    // defaults to nil\
var mp map[int]string // defaults to nil\
var fn func()         // defaults to nil\
var ptr *string       // defaults to nil\
\pard\tx720\pardeftab720\partightenfactor0

\f0\fs48 \cf2 \cb1 \
3) \cb3 A string is a sequence of one or more characters (letters, numbers, symbols) that can be either a constant or a variable. Strings exist within either back quotes\'a0
\f2\b `
\f0\b0 \'a0or double quotes\'a0
\f2\b "
\f0\b0 \'a0in Go and have different characteristics depending on which quotes you use.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 If you use the back quotes, you are creating a\'a0
\f1\fs42 \cf4 raw
\f0\fs48 \cf2 \'a0string literal. If you use the double quotes, you are creating an\'a0
\f1\fs42 \cf4 interpreted
\f0\fs48 \cf2 \'a0string literal.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb1 \
\
4) 
\fs72 \cf3 \cb6 Interpreted String Literals\cb1 \
\pard\pardeftab720\sa240\partightenfactor0

\fs48 \cf2 Interpreted string literals are character sequences between double quotes, as in\'a0
\f1\fs42 \cf4 "bar"
\f0\fs48 \cf2 . Within the quotes, any character may appear except newline and unescaped double quote.\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 a := "Say \\"hello\\" to Go!"\
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \cb1 You will almost always use interpreted string literals because they allow for escape characters within them.\
\
5) Backticks or characters inside a single quotes, its considered as raw string literal in Golang\
6) 
\fs72 \cf3 \cb6 UTF-8\cb1 \

\fs48 \cf2 Go supports UTF-8 characters out of the box, without any special setup, libraries, or packages.\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 a := "Hello, 
\f3 \'ca\'c0\'bd\'e7
\f1 "\
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \cb1 \
7) 
\fs72 \cf3 \cb6 Runes\cb1 \

\fs48 \cf2 A rune is a special type in go that represents special characters.\
You can define a rune using the single quote (
\f1\fs42 \cf4 '
\f0\fs48 \cf2 ) character:\
\pard\pardeftab720\partightenfactor0

\f1\fs42 \cf3 \cb5 a := 'A'\
fmt.Println(a)\
\pard\pardeftab720\qc\partightenfactor0

\f0\fs24 \cf7 \cb1 file: ./src/examples/utf8-rune/main.go\
\pard\pardeftab720\qr\partightenfactor0

\fs48 \cf2 \'a0\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 If you run the program, it prints out the value of\'a0
\f1\fs42 \cf4 65
\f0\fs48 \cf2 .\
The reason for this is because\'a0
\f1\fs42 \cf4 runes
\f0\fs48 \cf2 \'a0in Go are a special type.\
A\'a0
\f1\fs42 \cf4 rune
\f0\fs48 \cf2 \'a0is an alias for\'a0
\f1\fs42 \cf4 int32
\f0\fs48 \cf2 . A rune can be made up of\'a0
\f1\fs42 \cf4 1
\f0\fs48 \cf2 \'a0to\'a0
\f1\fs42 \cf4 3
\f0\fs48 \cf2 \'a0int32 values.\
\
8) Go CLI commands:\
    a. 
\f2\b go build
\f0\b0  (Compiles a bulk of source code files)\
    b. 
\f2\b go run
\f0\b0  (compiles and executes one or 2 files)\
    c. 
\f2\b go fmt
\f0\b0  (formats all the files inside a directory)\
    d. go install (compiles and installs a package)\
    e. go get (downloads the raw source code of  someone else package )\
    f.  go test (run any tests associated with current directory)\
\
9) A Function with a \'93Receiver\'94 is like a method \'97 A function that belongs to an instance.\
10) Receiver function \'97 example, receiver function can receive any instance of type(slice, struct, array, int)\
\
     Ex:\
       deck.go \
        package main  \
         var deck []string \
          func (d deck) print \{\
             for i, item := range d \{\
                fmt.Println(\'93The range values are:\'94, I, item)\
             \}\
          \}\
\
        main.go\
        package main \
        func main() \{\
          cards := deck\{\'93shankar\'94, \'93Krishna\'94, \'93vasudeva\'94\}\
          cards.print()\
        \}\
\
\'97 valid code example:\
   
\f1\fs24 \cf8 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 type laptopSize \cf9 \strokec9 float\cf8 \cb1 \strokec8 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf8 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	       	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 func (ls laptopSize) getSizeOfLaptop() \{\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf9 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0   		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 return\cf8 \strokec8  ls\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0      \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \}\cb1 \
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs48 \cf2 \outl0\strokewidth0 \
\'97> Byte Slice , Ex: (asciitable.com)\
        String \'97> \'93Hi There!\'94\
        Byte slice \'97> []byte \'97> [72 105 32 116 104 101 114 101 33]\
        Ex: greeting := \'93Hi There!\'94\
              fmt.Println([]byte(greeting))  [72 105 32 116 104 101 114 101 33]\
     \'97> string to byte slice \'97> []byte(string)\
     \'97> byteslice to string \'97> string([]byte)\
\
\'97> Converting a slice of strings into a single string:\
     Import  \'93strings\'94\
    d := []string\{\'93krishna\'94, \'93vasudeva\'94, \'93govinda\'94\}\
\
      newstring := strings.Join(d, \'93,\'94)  //Join will take a slice of strings and separator as arguments\
\'97>  package \'93io/ioutil\'94 used to write to a file (import  \'93io/ioutil\'94) , its has methods to WriteFile (to write to a file), ReadFile(to read from a file)\
\'97> os.Exit(int), if Exit returns with value as zero or exit code as zero , means it ran successfully. If with error code non-zero, it\'92s a failure.\
\
\'97> go.mod \'97> How to create a go mod file for a go project: (Run the command \'93go mod init <directoryname>\'94, it will create a go.mod file\
\
\pard\pardeftab720\sa240\partightenfactor0

\f4\fs24 \cf10 \cb3 \outl0\strokewidth0 \strokec10 The\'a0
\f1 go.mod
\f4 \'a0file is designed to be human readable and machine writable. The\'a0
\f1 go
\f4 \'a0command provides several subcommands that change\'a0
\f1 go.mod
\f4 \'a0files. For example,\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#go-get"}}{\fldrslt 
\f1 go get}}\'a0can upgrade or downgrade specific dependencies. Commands that load the module graph will\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#go-mod-file-updates"}}{\fldrslt automatically update}}\'a0
\f1 go.mod
\f4 \'a0when needed.\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#go-mod-edit"}}{\fldrslt 
\f1 go mod edit}}\'a0can perform low-level edits. The\'a0{\field{\*\fldinst{HYPERLINK "https://pkg.go.dev/golang.org/x/mod/modfile?tab=doc"}}{\fldrslt 
\f1 golang.org/x/mod/modfile}}\'a0package can be used by Go programs to make the same changes programmatically.\
A\'a0
\f1 go.mod
\f4 \'a0file is required for the\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#glos-main-module"}}{\fldrslt main module}}, and for any\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#go-mod-file-replace"}}{\fldrslt replacement module}}\'a0specified with a local file path. However, a module that lacks an explicit\'a0
\f1 go.mod
\f4 \'a0file may still be\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#go-mod-file-require"}}{\fldrslt required}}\'a0as a dependency, or used as a replacement specified with a module path and version; see\'a0{\field{\*\fldinst{HYPERLINK "https://go.dev/ref/mod#non-module-compat"}}{\fldrslt Compatibility with non-module repositories}}.      
\f0\fs48 \cf2 \cb1 \outl0\strokewidth0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 ;\
\

\f2\b \ul Interface\

\f0\b0 \ulnone \
\
   \
\
\
   \
    \
\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
}